[{"content":"\u003cp\u003eToday I am going to talk about Python language. If you follow me you will know that I really love this language from web development to solving dsa problems. It is my first real language that I learned on my own (my first programming language is c but I just copied code from friend to pass the class in university). From the moment I started learning I am in love with this language, I know it has some problems like it is somewhat slow compared to other compiled language and etc but let me tell you for sure if you can do python there is far more plus than downside.\u003c/p\u003e\n\u003cp\u003eTo mention some:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSimplicity in Syntax:\u003c/strong\u003e\nPython\u0026rsquo;s syntax is so clear and straightforward that it feels like poetry. Its simplicity allows developers to focus on solving problems rather than wrestling with complex code structures. We\u0026rsquo;ll delve into how Python\u0026rsquo;s readability makes it a language that you can easily fall in love with.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eVersatility and Flexibility:\u003c/strong\u003e\nPython is a polyglot, seamlessly integrating with other languages. Whether you\u0026rsquo;re building web applications, conducting data analysis, or diving into artificial intelligence, Python is your versatile companion. We\u0026rsquo;ll explore the vast domains where Python\u0026rsquo;s flexibility shines, making it a language you can rely on for all your coding endeavors.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eA Thriving Ecosystem:\u003c/strong\u003e\nThe Python ecosystem is a flourishing garden of libraries, frameworks, and tools. From Django for web development to TensorFlow for machine learning, Python provides a rich collection of resources. Join us as we stroll through this lush ecosystem and discover the treasures that make Python truly lovable.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCommunity and Collaboration:\u003c/strong\u003e\nLove thrives in a community, and Python boasts one of the most vibrant and welcoming communities in the programming world. We\u0026rsquo;ll discuss how the Python community\u0026rsquo;s collaborative spirit fosters learning, sharing, and supporting one another.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eReadability and PEP 8:\u003c/strong\u003e\nPython\u0026rsquo;s commitment to code readability is encapsulated in the PEP 8 style guide. We\u0026rsquo;ll explore how adhering to these guidelines not only makes your code beautiful but also creates a shared aesthetic that unites Python enthusiasts around the globe.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBeginner-Friendly Nature:\u003c/strong\u003e\nPython is often the first programming language for many beginners, and there\u0026rsquo;s a reason for that. Its gentle learning curve and extensive documentation make it an ideal language for those taking their first steps into the world of programming. Join us as we reminisce about our own first encounters with Python.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInnovation and Trends:\u003c/strong\u003e\nPython isn\u0026rsquo;t just a language of the past; it\u0026rsquo;s continually evolving and adapting to the latest trends in technology. We\u0026rsquo;ll explore how Python remains at the forefront of innovation, from web development frameworks to advancements in artificial intelligence and machine learning.\u003c/p\u003e\n\u003ch2 id=\"to-get-started\"\u003eTo Get Started\u003c/h2\u003e\n\u003cp\u003eIn my last blog I talked about starting to learn data science and right now to get started with data science one should know some tools that are used in market right and these includes \u003cstrong\u003eExcel\u003c/strong\u003e, \u003cstrong\u003ePython\u003c/strong\u003e, \u003cstrong\u003eSQL\u003c/strong\u003e and etc. So this week I am going to publish my articles on Python language and its important features. Honestly there are many free resources on learning python and honestly they are great you can follow some of them if you want to but I learned best by doing myself so whatever you learn try to code them yourself and experiment with them.\u003c/p\u003e\n\u003cp\u003eFew I would point out:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://realpython.com/\"\u003eRealPython\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/python/default.asp\"\u003ew3school\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.python.org/3/\"\u003ePython Official Documentation\u003c/a\u003e (Most Important resource and honestly everyone should read it if they are working with python. It is very well written)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eI will publish more blogs on topics ranging from Beginner to Advanced concepts in hope to help someone out there who may have same problem which i talk in these.\u003c/p\u003e\n","description":"This is my blog about python and where one can learn python from.","image":"/images/blogs/post16/img1.png","permalink":"https://Exoutia.github.io/blogs/python-is-love/","title":"Python Is Love"},{"content":"\u003cp\u003eThe link to problem: \u003ca href=\"https://leetcode.com/problems/n-queens/description/\"\u003eleetcode/n-queens\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is very famous for practicing backtracking, in this problem the questioneer is asking how to arrange \u003cmark\u003en\u003c/mark\u003e number of queens in a \u003cmark\u003enxn\u003c/mark\u003e matrix. Now if you think this can be done using backtracking where we place a queen at every position and check if the position is correct and we able to place \u003cmark\u003en\u003c/mark\u003e queens in the board then return the board with those postions.\u003c/p\u003e\n\u003ch2 id=\"backtracking\"\u003eBacktracking\u003c/h2\u003e\n\u003cp\u003eNow that the intution is clear lets see the code.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esolveNQueens\u003c/span\u003e(self, n: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e List[List[str]]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        state \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;.\u0026#39;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e n \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e _ \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e range(n)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        visited_cols \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e set()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        visited_diagonals \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e set()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        visited_antidiagonals \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e set()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebackward\u003c/span\u003e(r):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e r \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e n:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                res\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend([\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(row) \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e row \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e state])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e c \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e range(n):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                diff \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e r \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e c\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                sum_diag \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e r \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e c\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e (c \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e visited_cols \u003cspan style=\"color:#f92672\"\u003eor\u003c/span\u003e diff \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e visited_diagonals \u003cspan style=\"color:#f92672\"\u003eor\u003c/span\u003e sum_diag \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e visited_antidiagonals):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    visited_cols\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd(c)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    visited_diagonals\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd(diff)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    visited_antidiagonals\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd(sum_diag)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    state[r][c] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Q\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    backward(r\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    visited_cols\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eremove(c)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    visited_diagonals\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eremove(diff)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    visited_antidiagonals\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eremove(sum_diag)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    state[r][c]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;.\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        backward(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow let\u0026rsquo;s calculate the time complexity as for every row we have to check the posibility for that position and the position that are left so the less queens left to place the less times we have to check for correct postion so it will look some what like this \u003cmark\u003en x (n - 1) x (n - 2) x \u0026hellip; x 1\u003c/mark\u003e, this coresponds to \u003cmark\u003eO(n!)\u003c/mark\u003e time complexity. And space complexity is \u003cmark\u003eO(nxn)\u003c/mark\u003e as this is the space of board where we are adding queens.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTime Complexity: O(n!)\u003c/strong\u003e\n\u003cbr/\u003e\n\u003cstrong\u003eSpace Complexity: O(nxn)\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n","description":"Leetcode problem solution for problem number: 51","image":"/images/blogs/post13/img1.png","permalink":"https://Exoutia.github.io/blogs/n-queens/","title":"N Queens"},{"content":"\u003ch1 id=\"blog-pic-generator\"\u003eBlog Pic Generator\u003c/h1\u003e\n\u003cp\u003eIf you read my blogs about solving question you will see a similar pic for my blog at top of my page. This pic is generated using a web-application that I have made using Python.\u003c/p\u003e\n\u003ch2 id=\"technologies\"\u003eTechnologies\u003c/h2\u003e\n\u003cp\u003eI have made this web application using Python framework \u003cmark\u003eFlask\u003c/mark\u003e, and \u003cmark\u003eJinja\u003c/mark\u003e templates.\u003c/p\u003e\n\u003ch2 id=\"how-does-this-work\"\u003eHow Does this work.\u003c/h2\u003e\n\u003cp\u003eIn this application I have made a form that will take the information that I want to show in the picture and optionaly a picture. When everything is filled up, the app will generate a html page with the information correctly rendered. After this I just take the screenshot and insert into my blog.\u003c/p\u003e\n\u003cp\u003eThe backend is made using \u003cmark\u003eFlask\u003c/mark\u003e which store and handle all the information that I send to the application and rendering is done using dynamic web template that I created using \u003cmark\u003eJinja\u003c/mark\u003e with \u003cmark\u003ehtml-css\u003c/mark\u003e.\u003c/p\u003e\n\u003cp\u003eThe link to my project: \u003ca href=\"https://github.com/Exoutia/blog-pic-generator\"\u003eBolg-pic-generator\u003c/a\u003e.\u003c/p\u003e\n","description":"","image":"/images/blogs/post12/img1.png","permalink":"https://Exoutia.github.io/blogs/blog-pic-generator/","title":"Blog Pic Generator"},{"content":"\u003cp\u003eToday I solved this leetcode problem \u003ca href=\"https://leetcode.com/problems/subsets-ii/description/\"\u003eleetcode/subsets-ii\u003c/a\u003e, before solving this question one should solve the \u003ca href=\"https://leetcode.com/problems/subsets/\"\u003eleetcode/subset\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"backtracking\"\u003eBacktracking\u003c/h2\u003e\n\u003cp\u003eIn this problem we need to find the powerset of the list of number given. The catch is that the list of numbers can contain the duplicates but the ans set shouldn\u0026rsquo;t contain any duplicates. To solve the problem we can use backtrackint where at every step we either include the number or not. If we do this we can solve the subsets problem but subset has the condition to not include the duplicate. To solve this at every step we can make sure that we don\u0026rsquo;t include the duplicate step that we already included in the include side. This is because at every other step where the duplicate is added will include the combination for that number with all the arrangement so we just need to skip that duplicate number altogether where we skipping the numbers. This can be done using the sorting of number altogether.\nTo better understand let\u0026rsquo;s see the below diagram.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/blogs/post8/img2.png\" alt=\"state space tree for the prbolem with skipping of duplicate number on the skipping side of branches\"\u003e\u003c/p\u003e\n\u003cp\u003eNow let us see the code to better understand this approach.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esubsetsWithDup\u003c/span\u003e(self, nums: List[int]) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e List[List[int]]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esort()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edfs\u003c/span\u003e(i, sub):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e len(nums):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                res\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(sub\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecopy())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sub\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(nums[i])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            dfs(i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, sub)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sub\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epop()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e len(nums) \u003cspan style=\"color:#f92672\"\u003eand\u003c/span\u003e nums[i] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e nums[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                i \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            dfs(i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, sub)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        dfs(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, [])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTime complexity \u003cmark\u003en2\u003csup\u003en\u003c/sup\u003e\u003c/mark\u003e this is due to the time complexity for generating the list of every arrangement we are taking 2 descision of either including the number or not which is happening for every element that\u0026rsquo;s why the time complexity is so huge. Space complexity is same.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTime Complexity: n2\u003csup\u003en\u003c/sup\u003e\u003c/strong\u003e\n\u003cbr/\u003e\n\u003cstrong\u003eSpace Complexity: n2\u003csup\u003en\u003c/sup\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n","description":"Leetcode problem solution for problem number: 90","image":"/images/blogs/post8/img1.png","permalink":"https://Exoutia.github.io/blogs/subset-2/","title":"Subset 2"},{"content":"\u003cp\u003eThe link to problem is \u003ca href=\"https://leetcode.com/problems/find-median-from-data-stream/description/\"\u003eLeetcode/find-median-from-data-stream\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis is hard problem but it is somewhat easy compared to some other hard problems. It is only easy if you know data-structures well enough. In this problem you are asked to create class which has two methods one for adding a integer, other function is used to get median in the ordered list made up of elements added previously in the list.\u003c/p\u003e\n\u003ch2 id=\"heapqueue-approach\"\u003eHeapqueue Approach\u003c/h2\u003e\n\u003cp\u003eNow this problem is hard cause we have to get median in \u003cmark\u003eO(1)\u003c/mark\u003e constant complexity. So if we can make a datas-tructure that will make the list always sorted in comparable time then it should be fine. To get median if we can just get two middle element in even number of elements of array. If you think carefully the one data-structure that can sort elements automatically, is heap and if we divide the array in two parts with \u003cmark\u003emin-heap\u003c/mark\u003e and \u003cmark\u003emax-heap\u003c/mark\u003e. Where \u003cmark\u003emax-heap\u003c/mark\u003e will store two left side elemnts and \u003cmark\u003emin-heap\u003c/mark\u003e for right side elements. Both sides should have approxiamte size so that we can get the median from larger side, when the array is odd length.\u003c/p\u003e\n\u003cp\u003eWhy we use \u003cmark\u003emax-heap\u003c/mark\u003e for left side and \u003cmark\u003emin-heap\u003c/mark\u003e right cause median is calculated using middle two elements and \u003cmark\u003emax-heap\u003c/mark\u003e will give maximum element and \u003cmark\u003emin-heap\u003c/mark\u003e will give minimum element.\u003c/p\u003e\n\u003cp\u003eNow we can see the code to get better idea about the solution:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e heapq\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMedianFinder\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e __init__(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esmall_heap \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elarge_heap \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaddNum\u003c/span\u003e(self, num: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elarge_heap \u003cspan style=\"color:#f92672\"\u003eand\u003c/span\u003e num \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elarge_heap[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappush(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elarge_heap, num)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappush(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esmall_heap, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003enum)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e len(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esmall_heap) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e len(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elarge_heap) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappush(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elarge_heap, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eheapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappop(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esmall_heap))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelif\u003c/span\u003e len(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elarge_heap) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e len(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esmall_heap):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappush(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esmall_heap, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eheapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappop(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elarge_heap))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindMedian\u003c/span\u003e(self) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e float:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e len(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esmall_heap) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e len(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elarge_heap):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eself\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esmall_heap[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelif\u003c/span\u003e len(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esmall_heap) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e len(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elarge_heap):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elarge_heap[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eself\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esmall_heap[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elarge_heap[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]) \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTime complexity for addNum is \u003cmark\u003eO(log(n))\u003c/mark\u003e and findMedian is \u003cmark\u003eO(1)\u003c/mark\u003e and if you think number of times the number is added to the data-structure then it becomes the \u003cmark\u003eO(nlog(n))\u003c/mark\u003e. The space complexity is \u003cmark\u003eO(n)\u003c/mark\u003e which is due to storing the \u003cmark\u003en\u003c/mark\u003e elements in two different list which will add up to \u003cmark\u003en\u003c/mark\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTime Complexity: O(nlog(n))\u003c/strong\u003e\n\u003cbr /\u003e\n\u003cstrong\u003eSpace Complexity: O(n)\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n","description":"Leetcode problem solution for problem number: 295","image":"/images/blogs/post7/img1.png","permalink":"https://Exoutia.github.io/blogs/find-median-from-data-stream/","title":"Find Median From Data Stream"},{"content":"\u003cp\u003eThe link to question is \u003ca href=\"https://leetcode.com/problems/design-twitter/description/\"\u003elettcode/design-twitter\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe question is asking us to design a simple twitter like class. It has four functions:\n- To create a post.\n- To follow another user.\n- To unfollow any user.\n- To get newsfeed which comprises of ten recent post from the people user is following and himself.\u003c/p\u003e\n\u003cp\u003eThis question is somewhat advanced level to solve it one should already be adept in other datastructures like array and have some idea about sorting. Before doing this you can solve this \u003ca href=\"https://leetcode.com/problems/merge-k-sorted-lists/description/\"\u003equestion\u003c/a\u003e first.\u003c/p\u003e\n\u003cp\u003eNow that the basic gist of question is clear, let\u0026rsquo;s solve it. let\u0026rsquo;s break it down.\u003c/p\u003e\n\u003ch2 id=\"twitter-design\"\u003eTwitter Design\u003c/h2\u003e\n\u003ch3 id=\"to-follow-users\"\u003eTo follow users\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s start thinking, this function takes the \u003cmark\u003efollowerId\u003c/mark\u003e and \u003cmark\u003efolloweeId\u003c/mark\u003e and we need to connect two id together. Now one user can have many followers and user can also follow many other users.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/blogs/post6/img2.png\" alt=\"showing the users and followers connections\"\u003e\u003c/p\u003e\n\u003cp\u003eTo resolve this problme one can use \u003cmark\u003ehashmap\u003c/mark\u003e where every \u003cmark\u003efollowerId\u003c/mark\u003e is key and which will sotre a set with every \u003cmark\u003efolloweeId\u003c/mark\u003e. This way every time new \u003cmark\u003efolloweeId\u003c/mark\u003e is added to specific \u003cmark\u003efollowerId\u003c/mark\u003e it will solve all the problem.\u003c/p\u003e\n\u003ch3 id=\"to-unfollow-users\"\u003eTo unfollow users\u003c/h3\u003e\n\u003cp\u003eIn previous section we made the hashmao so to unfollow just remove the \u003cmark\u003efolloweeId\u003c/mark\u003e from the set of \u003cmark\u003efollowekId\u003c/mark\u003e.\u003c/p\u003e\n\u003ch3 id=\"to-create-new-post\"\u003eTo create new post\u003c/h3\u003e\n\u003cp\u003eNow we can store the tweets in hasmap but with key as \u003cmark\u003euserId\u003c/mark\u003e and tweets can be stored into a \u003cmark\u003equeue\u003c/mark\u003e. This way when we retrive the posts accordingly to the order they are created.\u003c/p\u003e\n\u003ch3 id=\"to-create-newsfeed\"\u003eTo create newsfeed\u003c/h3\u003e\n\u003cp\u003eTo create news feed we will just merge the arrays gotten from the different users from his followers List according to the hashmap. Just like \u003cmark\u003emerging k sorted list\u003c/mark\u003e.\u003c/p\u003e\n\u003cp\u003eNow let\u0026rsquo;s see the code.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTwitter\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e __init__(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecount \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etweetMap \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e defaultdict(list)  \u003cspan style=\"color:#75715e\"\u003e# userId -\u0026gt; list of [count, tweetIds]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efollowMap \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e defaultdict(set)  \u003cspan style=\"color:#75715e\"\u003e# userId -\u0026gt; set of followeeId\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epostTweet\u003c/span\u003e(self, userId: int, tweetId: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etweetMap[userId]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend([self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecount, tweetId])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecount \u003cspan style=\"color:#f92672\"\u003e-=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetNewsFeed\u003c/span\u003e(self, userId: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e List[int]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        minHeap \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efollowMap[userId]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd(userId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e followeeId \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efollowMap[userId]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e followeeId \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etweetMap:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                index \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e len(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etweetMap[followeeId]) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                count, tweetId \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etweetMap[followeeId][index]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappush(minHeap, [count, tweetId, followeeId, index \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e minHeap \u003cspan style=\"color:#f92672\"\u003eand\u003c/span\u003e len(res) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            count, tweetId, followeeId, index \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappop(minHeap)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(tweetId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e index \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                count, tweetId \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etweetMap[followeeId][index]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappush(minHeap, [count, tweetId, followeeId, index \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efollow\u003c/span\u003e(self, followerId: int, followeeId: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efollowMap[followerId]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd(followeeId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eunfollow\u003c/span\u003e(self, followerId: int, followeeId: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e followeeId \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efollowMap[followerId]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efollowMap[followerId]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eremove(followeeId)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHope this helps you. If you got any message for me just ping me using my socials.\u003c/p\u003e\n","description":"Leetcode problem solution for problem number: 355","image":"/images/blogs/post6/img1.png","permalink":"https://Exoutia.github.io/blogs/design-twitter/","title":"Design Twitter"},{"content":"\u003cp\u003eToday we are going to solve this \u003ca href=\"https://leetcode.com/problems/task-scheduler/description/\"\u003eleetcod/task-scheduler\u003c/a\u003e. This is a good problem and would need some thinking to solve it thorughly.\u003c/p\u003e\n\u003ch2 id=\"heapqueue-approach\"\u003eHeapqueue Approach\u003c/h2\u003e\n\u003cp\u003eIn the question one had to find the least time a computer would take to complete some tasks, while completing task computer has to take some time before it can do the same task again so either do another task or do nothing for that unit of time. We are asked to find the least time it would take to complete all the task.\u003c/p\u003e\n\u003cp\u003eTo solve this question we will take a maxHeap (max-priority-queue) why we will do this just imagine what would be best way to arrange solve the task that we can do other task while its in cooldown period obviously the one with the most count cause then after other task we can take those task not worry about wasting time while less count task is in cooldown period.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/blogs/post5/img2.png\" alt=\"maxHeap and queue visualisation\"\u003e\u003c/p\u003e\n\u003cp\u003eThe algorithm is pretty simple:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreate a \u003cmark\u003emaxHeap\u003c/mark\u003e from the count of tasks provided by the problem.\u003c/li\u003e\n\u003cli\u003eCreate a \u003cmark\u003equeue\u003c/mark\u003e to store the updated count after one task is done and time when when its in cooldown period.\u003c/li\u003e\n\u003cli\u003eCreate the \u003cmark\u003etime\u003c/mark\u003e variable to start the count when the task is being done by computer.\u003c/li\u003e\n\u003cli\u003estart while loop until any one \u003cmark\u003equeue\u003c/mark\u003e or \u003cmark\u003emaxHeap\u003c/mark\u003e contains task to complete.\u003c/li\u003e\n\u003cli\u003einside the loop increase the \u003cmark\u003etime\u003c/mark\u003e by 1.\u003c/li\u003e\n\u003cli\u003echeck if the \u003cmark\u003emaxHeap\u003c/mark\u003e contains any task to do. If there is pop it minus one from the count and calculate the cooldown for it by adding the current \u003cmark\u003etime\u003c/mark\u003e and the cooldown variable \u003cmark\u003en\u003c/mark\u003e. Then insert both variable inside the \u003cmark\u003equeue\u003c/mark\u003e. I will not do it if the count of any task become 0 then it will just be skipped.\u003c/li\u003e\n\u003cli\u003eNow check if \u003cmark\u003equeue\u003c/mark\u003e\u0026rsquo;s top element cooldown time is equal to the current \u003cmark\u003etime\u003c/mark\u003e variable. If it is pop it and insert into the \u003cmark\u003emaxHeap\u003c/mark\u003e.\u003c/li\u003e\n\u003cli\u003erepeat step 4 to 7 until both \u003cmark\u003equeue\u003c/mark\u003e and \u003cmark\u003emaxHeap\u003c/mark\u003e is empty.\u003c/li\u003e\n\u003cli\u003eWhen loop stops return the \u003cmark\u003etime\u003c/mark\u003e variable.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eNow the code look like this. (as python heapq library only contains min-heap we i am going to treat those number in count as negative and instead of minus 1 from tasks count I will add it everything else will be same and when the task number reaches 0 will not add it inside the queue.)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e heapq\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e collections \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Counter, deque\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e typing \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e List\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eleastInterval\u003c/span\u003e(self, tasks: List[str], n: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e int:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        maxHeap \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ei \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e Counter(tasks)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evalues()]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheapify(maxHeap)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        time \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        queue: deque[tuple[int, int]] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e deque()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e maxHeap \u003cspan style=\"color:#f92672\"\u003eor\u003c/span\u003e queue:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            time \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e maxHeap:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                task_count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappop(maxHeap)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                cooldown \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e time\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e task_count \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    queue\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend((task_count, cooldown))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e queue \u003cspan style=\"color:#f92672\"\u003eand\u003c/span\u003e queue[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e][\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e time:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappush(maxHeap, queue\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epopleft()[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e time        \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow lets see whats the time complexity, for making a heap we take \u003cmark\u003eO(n)\u003c/mark\u003e (\u003cmark\u003en\u003c/mark\u003e is the number of tasks) time and every other operation is \u003cmark\u003eO(1)\u003c/mark\u003e (the insertion in queue)  or \u003cmark\u003eO(log(n))\u003c/mark\u003e (the insertion in heap) but in worst case (where all the task is of same type) the loop has to theoritically run for \u003cmark\u003eO(n * m)\u003c/mark\u003e (where \u003cmark\u003em\u003c/mark\u003e is the cooldown time). And space complexity is \u003cmark\u003eO(n)\u003c/mark\u003e cause space taken by heap is \u003cmark\u003eO(26)\u003c/mark\u003e (since tasks can be only upper case english alphabet letters) which corresponds to \u003cmark\u003eO(1)\u003c/mark\u003e so it is not included into the space complexity and we only count the space taken by taks list.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTime Complexity: O(n*m)\u003c/strong\u003e\n\u003cbr /\u003e\n\u003cstrong\u003eSpace Complexity: O(n)\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIf you got any issue or just want to talk to me about something ping me up in my socials.\u003c/p\u003e\n","description":"Leetcode problem solution for problem number: 621","image":"/images/blogs/post5/img1.png","permalink":"https://Exoutia.github.io/blogs/task-scheduler/","title":"Task Scheduler"},{"content":"\u003cp\u003eToday we are going to solve this \u003ca href=\"https://leetcode.com/problems/kth-largest-element-in-an-array/description/\"\u003eleetcode problem\u003c/a\u003e. In this problem we are required to find the kth largest element in an array of number.\u003c/p\u003e\n\u003ch2 id=\"intutive-approach\"\u003eIntutive Approach\u003c/h2\u003e\n\u003cp\u003eThis is pretty easy sum if we just sort the array and the return the kth largest element from the array. In python this is pretty easy problme cause in python list can be quried with negative number to return the elements from the end of arrray. For example \u003cmark\u003eList[-1]\u003c/mark\u003e give the last element and \u003cmark\u003elist[-2]\u003c/mark\u003e gives the second last element from the array and so one.\u003c/p\u003e\n\u003cp\u003eThe code looks like this for the obvious approach:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekthLargest\u003c/span\u003e(self, nums: List[int], k: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e int:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esort()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e nums[\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ek]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe time complexity is \u003cmark\u003eO(nlog(n))\u003c/mark\u003e as the only relevant time is taken while sorting of array. The space complexity is \u003cmark\u003eO(n)\u003c/mark\u003e which is the size of array.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTime Complexity: O(nlog(n))\u003c/strong\u003e\n\u003cbr\u003e\u003cbr\u003e\n\u003cstrong\u003eSpace Complexity: O(n)\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"using-priority-queue\"\u003eUsing Priority Queue\u003c/h2\u003e\n\u003cp\u003eNow as we know what a priority queue is os if we just use its property then just by running the heappop command for k we can get the kth largest element from the priority queue (Max Heap).\u003c/p\u003e\n\u003cp\u003eIn python heapq provides many functionality for working with heap and its different function, one such is \u003cmark\u003enlargest\u003c/mark\u003e function that takes \u003cmark\u003ek\u003c/mark\u003e and a \u003cmark\u003elist\u003c/mark\u003e to return the kth largest element, we will use that for the code.\u003c/p\u003e\n\u003cp\u003eThe code will look like this for this qpproach.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e heapq\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekthLargest\u003c/span\u003e(self, nums: List[int], k: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e int:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enlargest(k, nums)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the time complexity is \u003cmark\u003eO(n)\u003c/mark\u003e as this is the time it takes to make a list heap inplace and space complexity is same previously \u003cmark\u003eO(n)\u003c/mark\u003e as space is same for the storing of list.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTime Complexity: O(n)\u003c/strong\u003e\n\u003cbr\u003e\n\u003cstrong\u003eSpace Complexity: O(n)\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIf you find any problem with this article or you just want to have chang you can contact me through the the socials.\u003c/p\u003e\n","description":"Leetcode problem solution for problem number: 215","image":"/images/blogs/post4/img1.png","permalink":"https://Exoutia.github.io/blogs/kth-largest-element-in-array/","title":"Kth Largest Element in Array"},{"content":"\u003cp\u003eToday we discusses the solution to the \u003ca href=\"https://leetcode.com/problems/k-closest-points-to-origin/\"\u003eLeetCode problem\u003c/a\u003e of finding the Kth closest points to the origin.\u003c/p\u003e\n\u003ch2 id=\"intuitive-approach\"\u003eIntuitive Approach\u003c/h2\u003e\n\u003cp\u003eAn intuitive solution involves calculating the distance of each point from the origin, storing it with the point, and then sorting the list of points based on these distances. The Kth closest point is then retrieved from the sorted list.\u003c/p\u003e\n\u003cp\u003eHere\u0026rsquo;s the Python code for the intuitive approach:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e math \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e sqrt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekClosest\u003c/span\u003e(self, points: List[List[int]], k: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e List[List[int]]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e points:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            y \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            val\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend((sqrt(x\u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e y\u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e), [x, y]))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        val\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esort(key\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003elambda\u003c/span\u003e x: x[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ans \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [point \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e _, point \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e val]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e ans[:k]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTime complexity is \u003cmark\u003eO(nlog(n))\u003c/mark\u003e as we have to sort the list at the end before returning. For as we are storing the processed points and the distance inside the array of same size so the space complexity is \u003cmark\u003eO(n)\u003c/mark\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTime Complexity: O(n log n)\u003c/strong\u003e\n\u003cbr/\u003e\n\u003cstrong\u003eSpace Complexity: O(n)\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"using-priority-queue-heapqueue-approach\"\u003eUsing Priority Queue (HeapQueue) Approach\u003c/h2\u003e\n\u003cp\u003eAn optimized solution utilizes a priority queue (min-heap) to efficiently find the Kth closest points without sorting the entire list. It maintains a heap of the K closest points and updates it as new points are encountered.\u003c/p\u003e\n\u003cp\u003eHere\u0026rsquo;s the Python code for the heap queue approach:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e heapq\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekClosest\u003c/span\u003e(self, points: List[List[int]], K: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e List[List[int]]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        heap \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (x, y) \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e points:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            dist \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e(x\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ex \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e y\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ey)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e len(heap) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e K:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappushpop(heap, (dist, x, y))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappush(heap, (dist, x, y))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e [(x, y) \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (_, x, y) \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e heap]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo by using heap we are making the steps for sorting less, if k is less than the size of array then time it is better than the previous approach but if the k is compareable to the size of array then it is same as using previous approach this makes the time complexity \u003cmark\u003eO(nlog(k)\u003c/mark\u003e. As for space complexity it is full dependent on the k value so it will be \u003cmark\u003eO(k)\u003c/mark\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTime Complexity: O(n log K)\u003c/strong\u003e\n\u003cbr/\u003e\n\u003cstrong\u003eSpace Complexity: O(K)\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThese solutions provide different approaches to solving the problem. Feel free to choose the one that best suits your needs.\u003c/p\u003e\n","description":"Leetcode problem solution for problem number: 973","image":"/images/blogs/post3/img1.png","permalink":"https://Exoutia.github.io/blogs/k-closest-points-to-origin/","title":"K Closest Points to Origin"},{"content":"\u003cp\u003eLink to the question: \u003ca href=\"https://leetcode.com/problems/last-stone-weight/description/\"\u003eLeetCode/Last-stone-weight\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eIn this problem, you are given an array of integers representing the weights of stones. The goal is to simulate a game where, at each turn, the two heaviest stones are selected and either both are destroyed (if they have the same weight) or the lighter stone is destroyed, and the heavier one\u0026rsquo;s weight is updated. The process repeats until there is at most one stone left, and you need to return the weight of the last remaining stone or 0 if there are no stones left.\u003c/p\u003e\n\u003ch2 id=\"intutive-approach\"\u003eIntutive Approach\u003c/h2\u003e\n\u003cp\u003eThe forcefull approach would be to find the two largest stones, smash them and insert their value into the list again. This will be done until the length of list of stones is less than one.\nYou can then make this somewhat good by sorting the array and then pick the two largest element from the last and insert them again into the array and again sort the array to make it work in next iteration like this.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastStoneWeight\u003c/span\u003e(self, stones: List[int]) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e int:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Step 1: Sort the list of stones in ascending order\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        stones\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esort()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Step 2: Continue the process until there are at most two stones remaining\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e len(stones) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e# Step 3: Select the two heaviest stones\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            larger \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e stones\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epop()       \u003cspan style=\"color:#75715e\"\u003e# Get the weight of the larger stone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            smaller \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e stones\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epop()      \u003cspan style=\"color:#75715e\"\u003e# Get the weight of the smaller stone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e# Step 4: Process the stones based on their weights\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e larger \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e smaller:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# Both stones are destroyed if they have the same weight\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# Create a new stone with weight equal to the difference of the two stones\u0026#39; weights\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                stones\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend((larger \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e smaller))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e# Step 5: Sort the stones again in ascending order\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            stones\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esort()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Return the weight of the last remaining stone or 0 if there are no stones left\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e stones[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e stones \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow analyze the time and space complexity for the solution. The sorting takes \u003cmark\u003eO(nlog(n))\u003c/mark\u003e and the sorting is done at every iteration which is running for n times as the length of the stones list this implies that for n number of stones the sorting is done \u003cmark\u003en\u003c/mark\u003e. By calculating the time complexity comes as \u003cmark\u003eO(n\u003csup\u003e2\u003c/sup\u003elog(n))\u003c/mark\u003e.\u003c/p\u003e\n\u003cp\u003eFor space complexity is constant at no step we are using the any new array and every operation done in same array as stones so it will come to \u003cmark\u003eO(n)\u003c/mark\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003c/mark\u003eTime Complexity: O(n\u003csup\u003e2\u003c/sup\u003e log(n))\n\u003cbr\u003e\nSpace Complexity: O(n)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"max-priority-queue\"\u003eMax Priority Queue\u003c/h2\u003e\n\u003cp\u003eNow we can optimize the solution by observing the steps and what could we change different. First step while optimizing the code usually check for the repeating steps and eleminate those by using some tricks or data structures.\u003c/p\u003e\n\u003cp\u003eIn the previous solution it is obvious we are sorting the list after every iteration if we could just add the stones into the list and it will arrange itself in the correct order we could save so much time.\u003c/p\u003e\n\u003cp\u003eTo be fair there is a datasctructure which does that named as \u0026ldquo;Priority Queue\u0026rdquo; with two variants \u0026ldquo;Min Priority Queue\u0026rdquo; and \u0026ldquo;Max Priority Queue\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eA max-priority queue is a data structure that maintains a collection of elements with assigned priorities and allows efficient retrieval of the element with the highest priority. The element with the maximum priority is always dequeued first.\u003c/p\u003e\n\u003cp\u003eWe are going to use \u0026ldquo;Max Priority Queue\u0026rdquo; to be mroe specific ( but python \u003cmark\u003eheapq\u003c/mark\u003e does not support max-priority queue so we just multiply the \u003cmark\u003e-1\u003c/mark\u003e to make the largest element smallest and while getting the element we just multiply with \u003cmark\u003e-1\u003c/mark\u003e again this will ensure the calculation is correct at every step). By using this when we call two times \u003cmark\u003eheappop\u003c/mark\u003e we will get two largest element and when inserting the new element the datastructure will be correctly arranged.\u003c/p\u003e\n\u003cp\u003eGetting the largest element in Max Priority Queue takes \u003cmark\u003eO(1)\u003c/mark\u003e time and insertion takes \u003cmark\u003eO(log(n))\u003c/mark\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e heapq\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastStoneWeight\u003c/span\u003e(self, stones: List[int]) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e int:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Initialize a max heap, push negation of stone weights, and update heap after each smashing operation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        heap \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e stones:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappush(heap, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e i)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e len(heap) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            y \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappop(heap)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappop(heap)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e y:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappush(heap, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e (y \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e x))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e heap[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e heap \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e# Return the weight of the last remaining stone or 0 if no stones left\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow analyze the time and space complexity for the solution. The heap operations take \u003cmark\u003eO(log n)\u003c/mark\u003e, and the loop iterates until there is at most one stone left, resulting in a total time complexity of \u003cmark\u003eO(nlog(n))\u003c/mark\u003e due to the heap operations. The space complexity is O(n) as the heap stores the negation of stone weights.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTime Complexity: O(nlog(n))\n\u003cbr\u003e\nSpace Complexity: O(n)\u003c/p\u003e\n\u003c/blockquote\u003e\n","description":"Leetcode problem solution for problem number: 1046","image":"/images/blogs/post2/img1.png","permalink":"https://Exoutia.github.io/blogs/last-stone-weight/","title":"Last Stone Weight"},{"content":"\u003cp\u003eThis is a simple software design problem in \u003ca href=\"https://leetcode.com/problems/kth-largest-element-in-a-stream/description/\"\u003eLeetCode\u003c/a\u003e.\nSo according to problem we have to create a datastruccture which will return the kth_largest element every time we add element in this datastructure.\u003c/p\u003e\n\u003ch2 id=\"intutive-approach\"\u003eIntutive Approach\u003c/h2\u003e\n\u003cp\u003eThis soltuion can be pretty intutive just insert the new element and sort the list in reverse order and return the array the \u003cmark\u003eK\u003c/mark\u003e index element.\u003c/p\u003e\n\u003cp\u003eThe code would look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ekthLargest\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e __init__(self, k: int, nums: list[int]):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ek \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e k\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enums \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(self, n: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e int:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enums\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(n)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enums\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esort(reverse\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e len(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enums) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ek:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enums[k\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enums[\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTime Complexity: O(nlog(n))\u003c/strong\u003e\n\u003cbr/\u003e\n\u003cstrong\u003eSpace Complexity: O(n)\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"using-priority-queue\"\u003eUsing Priority Queue\u003c/h2\u003e\n\u003cp\u003eNow the previous solution is fine and great but this can be improved by using Priority queue. In Priority queue removing smallest elements takes \u003cmark\u003eO(1)\u003c/mark\u003e time. So if you read the question we just need to store the top \u003cmark\u003eK\u003c/mark\u003e largest element every time a new element is added.\u003c/p\u003e\n\u003cp\u003eNow the approach should be clear that every time new data is added we remore the smallest element until the size of heap is same as k or smaller. And finally return the last element in the array.\u003c/p\u003e\n\u003cp\u003eThe code look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e heapq\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eKthLargest\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e __init__(self, k: int, nums: list[int]):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Initialize the class with k and a list of integers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ek \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e k\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheap \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Convert the list into a min-heap using heapq.heapify\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheapify(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheap)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Keep only the k largest elements in the heap\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e len(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheap) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ek:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappop(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheap)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(self, n: int) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e int:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Add the new element to the heap\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappush(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheap, n)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Ensure that the heap maintains the k largest elements\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e len(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheap) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ek:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            heapq\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheappop(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheap)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Return the current kth largest element, which is the smallest in the heap\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eheap[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTime Complexity: O(n)\u003c/strong\u003e\n\u003cbr/\u003e\n\u003cstrong\u003eSpace Complexity: O(n)\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHope this helps you understand this prbolem.\u003c/p\u003e\n","description":"Leetcode problem solution for problem number: 703","image":"/images/blogs/post1/img1.png","permalink":"https://Exoutia.github.io/blogs/kth-largest-element-in-a-stream/","title":"Kth Largest Element In a Stream"}]