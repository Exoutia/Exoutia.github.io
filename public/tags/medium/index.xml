<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Medium on Bibek Jha</title>
    <link>https://Exoutia.github.io/tags/medium/</link>
    <description>Recent content in Medium on Bibek Jha</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jan 2024 20:54:43 +0530</lastBuildDate>
    <atom:link href="https://Exoutia.github.io/tags/medium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Subset 2</title>
      <link>https://Exoutia.github.io/blogs/subset-2/</link>
      <pubDate>Tue, 02 Jan 2024 20:54:43 +0530</pubDate>
      <guid>https://Exoutia.github.io/blogs/subset-2/</guid>
      <description>Today I solved this leetcode problem leetcode/subsets-ii, before solving this question one should solve the leetcode/subset.&#xA;Backtracking In this problem we need to find the powerset of the list of number given. The catch is that the list of numbers can contain the duplicates but the ans set shouldn&amp;rsquo;t contain any duplicates. To solve the problem we can use backtrackint where at every step we either include the number or not.</description>
    </item>
    <item>
      <title>Design Twitter</title>
      <link>https://Exoutia.github.io/blogs/design-twitter/</link>
      <pubDate>Thu, 28 Dec 2023 14:40:54 +0530</pubDate>
      <guid>https://Exoutia.github.io/blogs/design-twitter/</guid>
      <description>The link to question is lettcode/design-twitter.&#xA;The question is asking us to design a simple twitter like class. It has four functions: - To create a post. - To follow another user. - To unfollow any user. - To get newsfeed which comprises of ten recent post from the people user is following and himself.&#xA;This question is somewhat advanced level to solve it one should already be adept in other datastructures like array and have some idea about sorting.</description>
    </item>
    <item>
      <title>Task Scheduler</title>
      <link>https://Exoutia.github.io/blogs/task-scheduler/</link>
      <pubDate>Wed, 27 Dec 2023 14:42:54 +0530</pubDate>
      <guid>https://Exoutia.github.io/blogs/task-scheduler/</guid>
      <description>Today we are going to solve this leetcod/task-scheduler. This is a good problem and would need some thinking to solve it thorughly.&#xA;Heapqueue Approach In the question one had to find the least time a computer would take to complete some tasks, while completing task computer has to take some time before it can do the same task again so either do another task or do nothing for that unit of time.</description>
    </item>
    <item>
      <title>Kth Largest Element in Array</title>
      <link>https://Exoutia.github.io/blogs/kth-largest-element-in-array/</link>
      <pubDate>Tue, 26 Dec 2023 12:40:37 +0530</pubDate>
      <guid>https://Exoutia.github.io/blogs/kth-largest-element-in-array/</guid>
      <description>Today we are going to solve this leetcode problem. In this problem we are required to find the kth largest element in an array of number.&#xA;Intutive Approach This is pretty easy sum if we just sort the array and the return the kth largest element from the array. In python this is pretty easy problme cause in python list can be quried with negative number to return the elements from the end of arrray.</description>
    </item>
    <item>
      <title>K Closest Points to Origin</title>
      <link>https://Exoutia.github.io/blogs/k-closest-points-to-origin/</link>
      <pubDate>Mon, 25 Dec 2023 18:25:21 +0530</pubDate>
      <guid>https://Exoutia.github.io/blogs/k-closest-points-to-origin/</guid>
      <description>Today we discusses the solution to the LeetCode problem of finding the Kth closest points to the origin.&#xA;Intuitive Approach An intuitive solution involves calculating the distance of each point from the origin, storing it with the point, and then sorting the list of points based on these distances. The Kth closest point is then retrieved from the sorted list.&#xA;Here&amp;rsquo;s the Python code for the intuitive approach:&#xA;from math import sqrt class Solution: def kClosest(self, points: List[List[int]], k: int) -&amp;gt; List[List[int]]: val = [] for i in points: x = i[0] y = i[1] val.</description>
    </item>
  </channel>
</rss>
